# -*- coding: utf-8 -*-
"""Untitled46.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tr_QN3_tvSjOnTFbbvlupwrQf_0KVBKM
"""

!pip install flask

!pip install clickhouse_driver

!pip install flask_cors

import os
import io
import csv
import json
import pandas as pd
import clickhouse_driver
from flask import Flask, request, jsonify, render_template_string, Response
from flask_cors import CORS
import jwt
from datetime import datetime
import threading
import time
import secrets
from werkzeug.utils import secure_filename
from google.colab.output import eval_js
from google.colab import files

app = Flask(__name__)
CORS(app)
app.secret_key = secrets.token_hex(16)

# Global variables to track ingestion status
ingestion_status = {
    'status': 'Idle',
    'progress': 0,
    'total': 0,
    'processed': 0,
    'error': None,
}

# In-memory storage for preview data
preview_data = {
    'columns': [],
    'data': [],
}

# Create upload directory if it doesn't exist
UPLOAD_FOLDER = '/tmp/uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# HTML Template for the UI
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ClickHouse-Flat File Data Ingestion Tool</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            background-color: #f9f9f9;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        input[type="text"], input[type="number"], input[type="password"], select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 5px;
        }
        button:hover {
            background-color: #45a049;
        }
        button:disabled {
            background-color: #cccccc;
        }
        .buttons {
            margin-top: 15px;
            display: flex;
            justify-content: flex-start;
        }
        .status-area {
            margin-top: 20px;
            padding: 10px;
            background-color: #e9e9e9;
            border-radius: 4px;
        }
        .column-selection {
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid #ddd;
            padding: 10px;
            margin-top: 10px;
            background-color: white;
        }
        .column-item {
            margin-bottom: 5px;
        }
        .hidden {
            display: none;
        }
        .source-target-container {
            display: flex;
            gap: 20px;
        }
        .source-config, .target-config {
            flex: 1;
            padding: 15px;
            background-color: #f0f0f0;
            border-radius: 5px;
        }
        .progress-container {
            margin-top: 10px;
            width: 100%;
            background-color: #ddd;
            border-radius: 4px;
        }
        .progress-bar {
            height: 20px;
            background-color: #4CAF50;
            width: 0%;
            border-radius: 4px;
            text-align: center;
            line-height: 20px;
            color: white;
        }
        .preview-container {
            margin-top: 20px;
            overflow-x: auto;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .join-config {
            margin-top: 15px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #f5f5f5;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ClickHouse-Flat File Data Ingestion Tool</h1>

        <div class="form-group">
            <label for="direction">Data Flow Direction:</label>
            <select id="direction" onchange="toggleDirectionFields()">
                <option value="clickhouse_to_file">ClickHouse to Flat File</option>
                <option value="file_to_clickhouse">Flat File to ClickHouse</option>
            </select>
        </div>

        <div class="source-target-container">
            <!-- Source Configuration -->
            <div class="source-config" id="clickhouse-source-config">
                <h3>ClickHouse Source Configuration</h3>
                <div class="form-group">
                    <label for="ch_host">Host:</label>
                    <input type="text" id="ch_host" value="localhost">
                </div>
                <div class="form-group">
                    <label for="ch_port">Port:</label>
                    <input type="number" id="ch_port" value="9000">
                </div>
                <div class="form-group">
                    <label for="ch_database">Database:</label>
                    <input type="text" id="ch_database" value="default">
                </div>
                <div class="form-group">
                    <label for="ch_user">User:</label>
                    <input type="text" id="ch_user" value="default">
                </div>
                <div class="form-group">
                    <label for="ch_jwt_token">JWT Token:</label>
                    <input type="password" id="ch_jwt_token">
                </div>
                <div class="form-group" id="clickhouse-table-selection">
                    <label for="ch_table">Table:</label>
                    <select id="ch_table">
                        <option value="">-- Select after connecting --</option>
                    </select>
                </div>
                <div class="form-group">
                    <button id="connect-clickhouse" onclick="connectClickHouse()">Connect</button>
                    <button id="load-tables" onclick="loadTables()" disabled>Load Tables</button>
                </div>

                <!-- Multi-Table Join (Bonus Feature) -->
                <div class="form-group" id="join-tables-container" style="display: none;">
                    <label><input type="checkbox" id="enable-join" onchange="toggleJoinFields()"> Enable Multi-Table Join</label>

                    <div class="join-config" id="join-config" style="display: none;">
                        <div class="form-group">
                            <label for="join-table">Join Table:</label>
                            <select id="join-table">
                                <option value="">-- Select after connecting --</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="join-type">Join Type:</label>
                            <select id="join-type">
                                <option value="INNER JOIN">INNER JOIN</option>
                                <option value="LEFT JOIN">LEFT JOIN</option>
                                <option value="RIGHT JOIN">RIGHT JOIN</option>
                                <option value="FULL JOIN">FULL JOIN</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="join-condition">Join Condition:</label>
                            <input type="text" id="join-condition" placeholder="table1.id = table2.id">
                        </div>
                    </div>
                </div>
            </div>

            <!-- File Source Configuration -->
            <div class="source-config hidden" id="file-source-config">
                <h3>Flat File Source Configuration</h3>
                <div class="form-group">
                    <label for="file-upload">Upload File:</label>
                    <input type="file" id="file-upload" accept=".csv,.txt,.tsv">
                </div>
                <div class="form-group">
                    <label for="file-delimiter">Delimiter:</label>
                    <select id="file-delimiter">
                        <option value=",">Comma (,)</option>
                        <option value="\t">Tab (\t)</option>
                        <option value="|">Pipe (|)</option>
                        <option value=";">Semicolon (;)</option>
                    </select>
                </div>
                <div class="form-group">
                    <button id="load-file" onclick="loadFile()">Load File</button>
                </div>
            </div>

            <!-- ClickHouse Target Configuration -->
            <div class="target-config hidden" id="clickhouse-target-config">
                <h3>ClickHouse Target Configuration</h3>
                <div class="form-group">
                    <label for="ch_target_host">Host:</label>
                    <input type="text" id="ch_target_host" value="localhost">
                </div>
                <div class="form-group">
                    <label for="ch_target_port">Port:</label>
                    <input type="number" id="ch_target_port" value="9000">
                </div>
                <div class="form-group">
                    <label for="ch_target_database">Database:</label>
                    <input type="text" id="ch_target_database" value="default">
                </div>
                <div class="form-group">
                    <label for="ch_target_user">User:</label>
                    <input type="text" id="ch_target_user" value="default">
                </div>
                <div class="form-group">
                    <label for="ch_target_jwt_token">JWT Token:</label>
                    <input type="password" id="ch_target_jwt_token">
                </div>
                <div class="form-group">
                    <label for="ch_target_table">Target Table Name:</label>
                    <input type="text" id="ch_target_table" placeholder="Enter table name">
                </div>
                <div class="form-group">
                    <button id="connect-target-clickhouse" onclick="connectTargetClickHouse()">Connect</button>
                </div>
            </div>

            <!-- File Target Configuration -->
            <div class="target-config" id="file-target-config">
                <h3>Flat File Target Configuration</h3>
                <div class="form-group">
                    <label for="output-filename">Output Filename:</label>
                    <input type="text" id="output-filename" value="output.csv">
                </div>
                <div class="form-group">
                    <label for="output-delimiter">Delimiter:</label>
                    <select id="output-delimiter">
                        <option value=",">Comma (,)</option>
                        <option value="\t">Tab (\t)</option>
                        <option value="|">Pipe (|)</option>
                        <option value=";">Semicolon (;)</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Column Selection -->
        <div class="form-group" id="column-selection-container" style="display: none;">
            <h3>Column Selection</h3>
            <button onclick="selectAllColumns()">Select All</button>
            <button onclick="deselectAllColumns()">Deselect All</button>
            <div id="columns-list" class="column-selection"></div>
        </div>

        <!-- Action Buttons -->
        <div class="buttons">
            <button id="preview-btn" onclick="previewData()" disabled>Preview Data</button>
            <button id="start-ingestion-btn" onclick="startIngestion()" disabled>Start Ingestion</button>
        </div>

        <!-- Status Area -->
        <div class="status-area">
            <h3>Status: <span id="status-text">Idle</span></h3>
            <div class="progress-container">
                <div class="progress-bar" id="progress-bar">0%</div>
            </div>
            <p id="message-area"></p>
        </div>

        <!-- Preview Area -->
        <div class="preview-container" id="preview-container" style="display: none;">
            <h3>Data Preview</h3>
            <div id="preview-content"></div>
        </div>
    </div>

    <script>
        let selectedColumns = [];
        let availableColumns = [];
        let currentStatus = 'Idle';

        // Update UI based on selected direction
        function toggleDirectionFields() {
            const direction = document.getElementById('direction').value;

            // Reset UI elements
            document.getElementById('column-selection-container').style.display = 'none';
            document.getElementById('preview-container').style.display = 'none';
            document.getElementById('preview-btn').disabled = true;
            document.getElementById('start-ingestion-btn').disabled = true;

            if (direction === 'clickhouse_to_file') {
                // Source: ClickHouse
                document.getElementById('clickhouse-source-config').classList.remove('hidden');
                document.getElementById('file-source-config').classList.add('hidden');

                // Target: File
                document.getElementById('file-target-config').classList.remove('hidden');
                document.getElementById('clickhouse-target-config').classList.add('hidden');

                // Show join tables option
                document.getElementById('join-tables-container').style.display = 'block';
            } else {
                // Source: File
                document.getElementById('clickhouse-source-config').classList.add('hidden');
                document.getElementById('file-source-config').classList.remove('hidden');

                // Target: ClickHouse
                document.getElementById('file-target-config').classList.add('hidden');
                document.getElementById('clickhouse-target-config').classList.remove('hidden');

                // Hide join tables option
                document.getElementById('join-tables-container').style.display = 'none';
            }
        }

        // Toggle join configuration fields
        function toggleJoinFields() {
            const enableJoin = document.getElementById('enable-join').checked;
            document.getElementById('join-config').style.display = enableJoin ? 'block' : 'none';
        }

        // Connect to ClickHouse (Source)
        function connectClickHouse() {
            const host = document.getElementById('ch_host').value;
            const port = document.getElementById('ch_port').value;
            const database = document.getElementById('ch_database').value;
            const user = document.getElementById('ch_user').value;
            const jwt_token = document.getElementById('ch_jwt_token').value;

            updateStatus('Connecting to ClickHouse...', 'Connecting');

            fetch('/api/connect-clickhouse', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    host,
                    port,
                    database,
                    user,
                    jwt_token
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateStatus('Connected to ClickHouse', 'Connected');
                    document.getElementById('load-tables').disabled = false;
                } else {
                    updateStatus(`Error: ${data.message}`, 'Error');
                }
            })
            .catch(error => {
                updateStatus(`Error: ${error.message}`, 'Error');
            });
        }

        // Connect to ClickHouse (Target)
        function connectTargetClickHouse() {
            const host = document.getElementById('ch_target_host').value;
            const port = document.getElementById('ch_target_port').value;
            const database = document.getElementById('ch_target_database').value;
            const user = document.getElementById('ch_target_user').value;
            const jwt_token = document.getElementById('ch_target_jwt_token').value;

            updateStatus('Connecting to target ClickHouse...', 'Connecting');

            fetch('/api/connect-target-clickhouse', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    host,
                    port,
                    database,
                    user,
                    jwt_token
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateStatus('Connected to target ClickHouse', 'Connected');
                    // Enable buttons if source data is loaded
                    if (availableColumns.length > 0) {
                        document.getElementById('preview-btn').disabled = false;
                        document.getElementById('start-ingestion-btn').disabled = false;
                    }
                } else {
                    updateStatus(`Error: ${data.message}`, 'Error');
                }
            })
            .catch(error => {
                updateStatus(`Error: ${error.message}`, 'Error');
            });
        }

        // Load tables from ClickHouse
        function loadTables() {
            updateStatus('Loading tables...', 'Fetching');

            fetch('/api/get-tables')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const tableSelect = document.getElementById('ch_table');
                    const joinTableSelect = document.getElementById('join-table');

                    // Clear existing options
                    tableSelect.innerHTML = '';
                    joinTableSelect.innerHTML = '';

                    // Add default option
                    tableSelect.innerHTML = '<option value="">-- Select a table --</option>';
                    joinTableSelect.innerHTML = '<option value="">-- Select a table --</option>';

                    // Add tables
                    data.tables.forEach(table => {
                        const option = document.createElement('option');
                        option.value = table;
                        option.textContent = table;
                        tableSelect.appendChild(option);

                        // Clone for join table select
                        const joinOption = option.cloneNode(true);
                        joinTableSelect.appendChild(joinOption);
                    });

                    // Add event listener for table selection
                    tableSelect.onchange = function() {
                        if (this.value) {
                            loadTableColumns(this.value);
                        }
                    };

                    updateStatus('Tables loaded', 'Ready');
                } else {
                    updateStatus(`Error: ${data.message}`, 'Error');
                }
            })
            .catch(error => {
                updateStatus(`Error: ${error.message}`, 'Error');
            });
        }

        // Load columns for selected table
        function loadTableColumns(tableName) {
            updateStatus(`Loading columns for table ${tableName}...`, 'Fetching');

            const joinEnabled = document.getElementById('enable-join')?.checked || false;
            const joinTable = joinEnabled ? document.getElementById('join-table').value : '';
            const joinType = joinEnabled ? document.getElementById('join-type').value : '';
            const joinCondition = joinEnabled ? document.getElementById('join-condition').value : '';

            fetch('/api/get-columns', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    table: tableName,
                    join_enabled: joinEnabled,
                    join_table: joinTable,
                    join_type: joinType,
                    join_condition: joinCondition
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    displayColumnSelection(data.columns);
                    updateStatus('Columns loaded', 'Ready');
                    document.getElementById('preview-btn').disabled = false;
                    document.getElementById('start-ingestion-btn').disabled = false;
                } else {
                    updateStatus(`Error: ${data.message}`, 'Error');
                }
            })
            .catch(error => {
                updateStatus(`Error: ${error.message}`, 'Error');
            });
        }

        // Load and parse flat file
        function loadFile() {
            const fileInput = document.getElementById('file-upload');
            const delimiterSelect = document.getElementById('file-delimiter');

            if (!fileInput.files || fileInput.files.length === 0) {
                updateStatus('Please select a file', 'Error');
                return;
            }

            const file = fileInput.files[0];
            const delimiter = delimiterSelect.value;

            updateStatus(`Loading file ${file.name}...`, 'Fetching');

            const formData = new FormData();
            formData.append('file', file);
            formData.append('delimiter', delimiter);

            fetch('/api/upload-file', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    displayColumnSelection(data.columns);
                    updateStatus('File loaded', 'Ready');

                    // Enable buttons if target is connected
                    const targetConnected = document.getElementById('ch_target_table').value !== '';
                    if (targetConnected) {
                        document.getElementById('preview-btn').disabled = false;
                        document.getElementById('start-ingestion-btn').disabled = false;
                    }
                } else {
                    updateStatus(`Error: ${data.message}`, 'Error');
                }
            })
            .catch(error => {
                updateStatus(`Error: ${error.message}`, 'Error');
            });
        }

        // Display column selection UI
        function displayColumnSelection(columns) {
            availableColumns = columns;
            selectedColumns = [...columns]; // Select all by default

            const columnsContainer = document.getElementById('columns-list');
            columnsContainer.innerHTML = '';

            columns.forEach(column => {
                const columnItem = document.createElement('div');
                columnItem.className = 'column-item';

                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.id = `col-${column}`;
                checkbox.value = column;
                checkbox.checked = true;
                checkbox.addEventListener('change', updateSelectedColumns);

                const label = document.createElement('label');
                label.htmlFor = `col-${column}`;
                label.textContent = column;

                columnItem.appendChild(checkbox);
                columnItem.appendChild(label);
                columnsContainer.appendChild(columnItem);
            });

            document.getElementById('column-selection-container').style.display = 'block';
        }

        // Update selected columns based on checkboxes
        function updateSelectedColumns() {
            selectedColumns = [];
            const checkboxes = document.querySelectorAll('#columns-list input[type="checkbox"]:checked');
            checkboxes.forEach(checkbox => {
                selectedColumns.push(checkbox.value);
            });

            document.getElementById('preview-btn').disabled = selectedColumns.length === 0;
            document.getElementById('start-ingestion-btn').disabled = selectedColumns.length === 0;
        }

        // Select all columns
        function selectAllColumns() {
            const checkboxes = document.querySelectorAll('#columns-list input[type="checkbox"]');
            checkboxes.forEach(checkbox => {
                checkbox.checked = true;
            });
            selectedColumns = [...availableColumns];
            document.getElementById('preview-btn').disabled = false;
            document.getElementById('start-ingestion-btn').disabled = false;
        }

        // Deselect all columns
        function deselectAllColumns() {
            const checkboxes = document.querySelectorAll('#columns-list input[type="checkbox"]');
            checkboxes.forEach(checkbox => {
                checkbox.checked = false;
            });
            selectedColumns = [];
            document.getElementById('preview-btn').disabled = true;
            document.getElementById('start-ingestion-btn').disabled = true;
        }

        // Preview data
        function previewData() {
            if (selectedColumns.length === 0) {
                updateStatus('No columns selected', 'Error');
                return;
            }

            const direction = document.getElementById('direction').value;
            const payload = {
                direction: direction,
                columns: selectedColumns
            };

            // Add source-specific parameters
            if (direction === 'clickhouse_to_file') {
                payload.table = document.getElementById('ch_table').value;

                // Add join parameters if enabled
                if (document.getElementById('enable-join')?.checked) {
                    payload.join_enabled = true;
                    payload.join_table = document.getElementById('join-table').value;
                    payload.join_type = document.getElementById('join-type').value;
                    payload.join_condition = document.getElementById('join-condition').value;
                }
            } else {
                // For file to ClickHouse, no additional params needed
            }

            updateStatus('Fetching preview...', 'Fetching');

            fetch('/api/preview-data', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    displayPreview(data.columns, data.data);
                    updateStatus('Preview ready', 'Ready');
                } else {
                    updateStatus(`Error: ${data.message}`, 'Error');
                }
            })
            .catch(error => {
                updateStatus(`Error: ${error.message}`, 'Error');
            });
        }

        // Display preview data in table
        function displayPreview(columns, data) {
            const previewContent = document.getElementById('preview-content');

            let tableHtml = '<table><thead><tr>';
            columns.forEach(column => {
                tableHtml += `<th>${column}</th>`;
            });
            tableHtml += '</tr></thead><tbody>';

            data.forEach(row => {
                tableHtml += '<tr>';
                columns.forEach(column => {
                    tableHtml += `<td>${row[column] !== null && row[column] !== undefined ? row[column] : ''}</td>`;
                });
                tableHtml += '</tr>';
            });

            tableHtml += '</tbody></table>';
            previewContent.innerHTML = tableHtml;
            document.getElementById('preview-container').style.display = 'block';
        }

        // Start data ingestion
        function startIngestion() {
            if (selectedColumns.length === 0) {
                updateStatus('No columns selected', 'Error');
                return;
            }

            const direction = document.getElementById('direction').value;
            const payload = {
                direction: direction,
                columns: selectedColumns
            };

            // Add direction-specific parameters
            if (direction === 'clickhouse_to_file') {
                // Source: ClickHouse
                payload.table = document.getElementById('ch_table').value;

                // Add join parameters if enabled
                if (document.getElementById('enable-join')?.checked) {
                    payload.join_enabled = true;
                    payload.join_table = document.getElementById('join-table').value;
                    payload.join_type = document.getElementById('join-type').value;
                    payload.join_condition = document.getElementById('join-condition').value;
                }

                // Target: File
                payload.output_filename = document.getElementById('output-filename').value;
                payload.output_delimiter = document.getElementById('output-delimiter').value;
            } else {
                // Source: File
                // (File info already in server session)

                // Target: ClickHouse
                payload.ch_target_table = document.getElementById('ch_target_table').value;
            }

            updateStatus('Starting ingestion...', 'Ingesting');
            document.getElementById('preview-btn').disabled = true;
            document.getElementById('start-ingestion-btn').disabled = true;

            fetch('/api/start-ingestion', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Start polling for status updates
                    pollIngestionStatus();
                } else {
                    updateStatus(`Error: ${data.message}`, 'Error');
                    document.getElementById('preview-btn').disabled = false;
                    document.getElementById('start-ingestion-btn').disabled = false;
                }
            })
            .catch(error => {
                updateStatus(`Error: ${error.message}`, 'Error');
                document.getElementById('preview-btn').disabled = false;
                document.getElementById('start-ingestion-btn').disabled = false;
            });
        }

        // Poll for ingestion status updates
        function pollIngestionStatus() {
            const statusInterval = setInterval(() => {
                fetch('/api/ingestion-status')
                .then(response => response.json())
                .then(data => {
                    updateProgress(data);

                    if (data.status === 'Completed' || data.status === 'Error') {
                        clearInterval(statusInterval);
                        document.getElementById('preview-btn').disabled = false;
                        document.getElementById('start-ingestion-btn').disabled = false;

                        if (data.status === 'Completed') {
                            // For file downloads
                            if (document.getElementById('direction').value === 'clickhouse_to_file') {
                                const filename = document.getElementById('output-filename').value;
                                fetch(`/api/download/${filename}`)
                                .then(response => response.blob())
                                .then(blob => {
                                    const url = window.URL.createObjectURL(blob);
                                    const a = document.createElement('a');
                                    a.style.display = 'none';
                                    a.href = url;
                                    a.download = filename;
                                    document.body.appendChild(a);
                                    a.click();
                                    setTimeout(() => {
                                        document.body.removeChild(a);
                                        window.URL.revokeObjectURL(url);
                                    }, 100);
                                })
                                .catch(error => {
                                    console.error('Download failed:', error);
                                });
                            }
                        }
                    }
                })
                .catch(error => {
                    console.error('Status check failed:', error);
                });
            }, 1000);
        }

        // Update status display
        function updateStatus(message, status) {
            document.getElementById('status-text').textContent = status;
            document.getElementById('message-area').textContent = message;
            currentStatus = status;
        }

        // Update progress bar
        function updateProgress(status) {
            document.getElementById('status-text').textContent = status.status;

            const progressBar = document.getElementById('progress-bar');
            const progressPercentage = status.total > 0 ? Math.round((status.processed / status.total) * 100) : 0;
            progressBar.style.width = `${progressPercentage}%`;
            progressBar.textContent = `${progressPercentage}%`;

            let message = `Processed: ${status.processed}`;
            if (status.total > 0) {
                message += ` / ${status.total}`;
            }

            if (status.error) {
                message += ` - Error: ${status.error}`;
            }

            document.getElementById('message-area').textContent = message;
        }

        // Initialize the UI
        window.onload = function() {
            toggleDirectionFields();
        }
    </script>
</body>
</html>
'''

# ClickHouse connection objects
clickhouse_conn = None
clickhouse_target_conn = None

# Current file data
current_file = {
    'path': None,
    'delimiter': ',',
    'columns': [],
    'data': None  # Pandas DataFrame
}

@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE)

@app.route('/api/connect-clickhouse', methods=['POST'])
def connect_clickhouse():
    global clickhouse_conn
    data = request.json

    try:
        # Convert JWT token to password for ClickHouse authentication
        password = data.get('jwt_token', '')

        # Create connection
        clickhouse_conn = clickhouse_driver.Client(
            host=data['host'],
            port=int(data['port']),
            database=data['database'],
            user=data['user'],
            password=password
        )

        # Test connection
        result = clickhouse_conn.execute('SELECT 1')

        return jsonify({
            'success': True,
            'message': 'Connected successfully'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        })

@app.route('/api/connect-target-clickhouse', methods=['POST'])
def connect_target_clickhouse():
    global clickhouse_target_conn
    data = request.json

    try:
        # Convert JWT token to password for ClickHouse authentication
        password = data.get('jwt_token', '')

        # Create connection
        clickhouse_target_conn = clickhouse_driver.Client(
            host=data['host'],
            port=int(data['port']),
            database=data['database'],
            user=data['user'],
            password=password
        )

        # Test connection
        result = clickhouse_target_conn.execute('SELECT 1')

        return jsonify({
            'success': True,
            'message': 'Connected successfully'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        })

@app.route('/api/get-tables', methods=['GET'])
def get_tables():
    global clickhouse_conn

    try:
        if not clickhouse_conn:
            return jsonify({
                'success': False,
                'message': 'Not connected to ClickHouse'
            })

        result = clickhouse_conn.execute('SHOW TABLES')
        tables = [row[0] for row in result]

        return jsonify({
            'success': True,
            'tables': tables
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        })

@app.route('/api/get-columns', methods=['POST'])
def get_columns():
    global clickhouse_conn
    data = request.json

    try:
        if not clickhouse_conn:
            return jsonify({
                'success': False,
                'message': 'Not connected to ClickHouse'
            })

        # Handle join if enabled
        if data.get('join_enabled'):
            # Validate join parameters
            if not data.get('join_table') or not data.get('join_type') or not data.get('join_condition'):
                return jsonify({
                    'success': False,
                    'message': 'Join parameters are incomplete'
                })

            # Create a query to get combined columns
            query = f"""
                SELECT * FROM {data['table']}
                {data['join_type']} {data['join_table']}
                ON {data['join_condition']}
                LIMIT 1
            """

            result = clickhouse_conn.execute(query)
            columns = [col[0] for col in clickhouse_conn.execute(query, with_column_types=True)[1]]
        else:
            # Get columns for single table
            query = f"SELECT * FROM {data['table']} LIMIT 1"
            columns = [col[0] for col in clickhouse_conn.execute(query, with_column_types=True)[1]]

        return jsonify({
            'success': True,
            'columns': columns
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        })

@app.route('/api/upload-file', methods=['POST'])
def upload_file():
    global current_file

    try:
        if 'file' not in request.files:
            return jsonify({
                'success': False,
                'message': 'No file part'
            })

        file = request.files['file']
        if file.filename == '':
            return jsonify({
                'success': False,
                'message': 'No selected file'
            })

        # Get delimiter
        delimiter = request.form.get('delimiter', ',')

        # Save file
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)

        # Parse file with pandas
        try:
            df = pd.read_csv(filepath, sep=delimiter, encoding='utf-8')
        except UnicodeDecodeError:
            # Try different encoding
            df = pd.read_csv(filepath, sep=delimiter, encoding='latin1')

        # Store file info
        current_file['path'] = filepath
        current_file['delimiter'] = delimiter
        current_file['columns'] = df.columns.tolist()
        current_file['data'] = df

        return jsonify({
            'success': True,
            'columns': df.columns.tolist()
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        })

@app.route('/api/preview-data', methods=['POST'])
def preview_data():
    global clickhouse_conn, current_file, preview_data
    data = request.json

    try:
        # Get direction and columns
        direction = data.get('direction')
        columns = data.get('columns', [])

        # Process based on direction
        if direction == 'clickhouse_to_file':
            # Source is ClickHouse
            if not clickhouse_conn:
                return jsonify({
                    'success': False,
                    'message': 'Not connected to ClickHouse'
                })

            # Create query with selected columns
            table = data.get('table')
            column_list = ', '.join(columns)

            if data.get('join_enabled'):
                # Create join query
                query = f"""
                    SELECT {column_list} FROM {table}
                    {data['join_type']} {data['join_table']}
                    ON {data['join_condition']}
                    LIMIT 100
                """
            else:
                query = f"SELECT {column_list} FROM {table} LIMIT 100"

            # Execute query
            result = clickhouse_conn.execute(query, with_column_types=True)
            column_types = result[1]
            rows = result[0]

            # Convert to list of dicts
            preview_rows = []
            for row in rows:
                row_dict = {}
                for i, col in enumerate(columns):
                    row_dict[col] = row[i]
                preview_rows.append(row_dict)

            # Store preview data
            preview_data['columns'] = columns
            preview_data['data'] = preview_rows

            return jsonify({
                'success': True,
                'columns': columns,
                'data': preview_rows[:100]  # Limit to 100 rows
            })
        else:
            # Source is file
            if current_file['data'] is None:
                return jsonify({
                    'success': False,
                    'message': 'No file loaded'
                })

            # Get selected columns
            df = current_file['data'][columns]

            # Convert to list of dicts
            preview_rows = df.head(100).to_dict('records')

            # Store preview data
            preview_data['columns'] = columns
            preview_data['data'] = preview_rows

            return jsonify({
                'success': True,
                'columns': columns,
                'data': preview_rows
            })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        })

@app.route('/api/start-ingestion', methods=['POST'])
def start_ingestion():
    global ingestion_status
    data = request.json

    # Reset status
    ingestion_status = {
        'status': 'Starting',
        'progress': 0,
        'total': 0,
        'processed': 0,
        'error': None,
    }

    # Start ingestion in background thread
    thread = threading.Thread(target=perform_ingestion, args=(data,))
    thread.daemon = True
    thread.start()

    return jsonify({
        'success': True,
        'message': 'Ingestion started'
    })

def perform_ingestion(data):
    global clickhouse_conn, clickhouse_target_conn, current_file, ingestion_status

    try:
        direction = data.get('direction')
        columns = data.get('columns', [])

        if direction == 'clickhouse_to_file':
            # ClickHouse to File
            ingestion_status['status'] = 'Fetching from ClickHouse'

            # Create query with selected columns
            table = data.get('table')
            column_list = ', '.join(columns)

            if data.get('join_enabled'):
                # Create join query
                query = f"""
                    SELECT {column_list} FROM {table}
                    {data['join_type']} {data['join_table']}
                    ON {data['join_condition']}
                """
            else:
                query = f"SELECT {column_list} FROM {table}"

            # Get count for progress tracking
            if data.get('join_enabled'):
                count_query = f"""
                    SELECT COUNT(*) FROM {table}
                    {data['join_type']} {data['join_table']}
                    ON {data['join_condition']}
                """
            else:
                count_query = f"SELECT COUNT(*) FROM {table}"

            total_count = clickhouse_conn.execute(count_query)[0][0]
            ingestion_status['total'] = total_count

            # Execute query with streaming to avoid memory issues
            settings = {'max_block_size': 100000}  # Process in chunks
            result = clickhouse_conn.execute_iter(query, settings=settings)

            # Output filename
            output_filename = data.get('output_filename', 'output.csv')
            output_path = os.path.join(app.config['UPLOAD_FOLDER'], output_filename)

            # Delimiter
            delimiter = data.get('output_delimiter', ',')
            if delimiter == '\\t':
                delimiter = '\t'

            # Write to CSV
            ingestion_status['status'] = 'Writing to file'
            record_count = 0

            with open(output_path, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f, delimiter=delimiter)
                # Write header
                writer.writerow(columns)

                # Write data
                for row in result:
                    writer.writerow(row)
                    record_count += 1
                    ingestion_status['processed'] = record_count

                    # Update status every 1000 rows
                    if record_count % 1000 == 0:
                        ingestion_status['progress'] = min(99, int((record_count / total_count) * 100))

            ingestion_status['status'] = 'Completed'
            ingestion_status['progress'] = 100
            ingestion_status['processed'] = record_count

        else:
            # File to ClickHouse
            ingestion_status['status'] = 'Preparing data'

            if current_file['data'] is None:
                ingestion_status['status'] = 'Error'
                ingestion_status['error'] = 'No file loaded'
                return

            # Get selected columns
            df = current_file['data'][columns]

            # Create target table if it doesn't exist
            target_table = data.get('ch_target_table')

            if not clickhouse_target_conn:
                ingestion_status['status'] = 'Error'
                ingestion_status['error'] = 'Not connected to target ClickHouse'
                return

            # Detect column types and create schema
            schema = []
            for col in columns:
                dtype = df[col].dtype
                if pd.api.types.is_integer_dtype(dtype):
                    ch_type = 'Int64'
                elif pd.api.types.is_float_dtype(dtype):
                    ch_type = 'Float64'
                elif pd.api.types.is_datetime64_any_dtype(dtype):
                    ch_type = 'DateTime'
                else:
                    ch_type = 'String'
                schema.append(f"{col} {ch_type}")

            # Create table
            create_table_query = f"""
                CREATE TABLE IF NOT EXISTS {target_table} (
                    {', '.join(schema)}
                ) ENGINE = MergeTree()
                ORDER BY tuple()
            """

            try:
                clickhouse_target_conn.execute(create_table_query)
            except Exception as e:
                ingestion_status['status'] = 'Error'
                ingestion_status['error'] = f'Failed to create table: {str(e)}'
                return

            # Convert DataFrame to list of lists for insertion
            ingestion_status['status'] = 'Ingesting data'
            ingestion_status['total'] = len(df)

            # Batch size
            batch_size = 10000
            total_rows = len(df)
            batches = (total_rows + batch_size - 1) // batch_size  # Ceiling division

            for i in range(batches):
                start_idx = i * batch_size
                end_idx = min((i + 1) * batch_size, total_rows)

                batch_df = df.iloc[start_idx:end_idx]
                rows = batch_df.values.tolist()

                # Insert batch
                insert_query = f"INSERT INTO {target_table} ({', '.join(columns)}) VALUES"
                clickhouse_target_conn.execute(insert_query, rows)

                # Update status
                ingestion_status['processed'] = end_idx
                ingestion_status['progress'] = int((end_idx / total_rows) * 100)

            ingestion_status['status'] = 'Completed'
            ingestion_status['progress'] = 100

    except Exception as e:
        ingestion_status['status'] = 'Error'
        ingestion_status['error'] = str(e)

@app.route('/api/ingestion-status', methods=['GET'])
def get_ingestion_status():
    global ingestion_status
    return jsonify(ingestion_status)

@app.route('/api/download/<filename>', methods=['GET'])
def download_file(filename):
    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)

    if not os.path.exists(filepath):
        return jsonify({
            'success': False,
            'message': 'File not found'
        }), 404

    return Response(
        open(filepath, 'rb').read(),
        mimetype='text/csv',
        headers={'Content-Disposition': f'attachment; filename={filename}'}
    )

# For Google Colab compatibility
def setup_ngrok():
    try:
        from pyngrok import ngrok, conf
        import IPython

        # Set your authtoken
        conf.get_default().auth_token = "2vor6an9OV9hP8mMpp8QUVddEvd_2ftsMZVF5Tg9yapVEwBxy"

        # Start ngrok tunnel
        ngrok_tunnel = ngrok.connect(5000)
        public_url = ngrok_tunnel.public_url
        print(f"Public URL: {public_url}")

        # Display clickable link
        IPython.display.display(IPython.display.HTML(f"""
        <p>Click <a href="{public_url}" target="_blank">here</a> to open the application.</p>
        """))

        return public_url
    except ImportError:
        print("pyngrok not installed. Install with !pip install pyngrok")
        return None

# Main entry point
if __name__ == '__main__':
    # Check if running in Colab
    try:
        import google.colab
        in_colab = True
    except ImportError:
        in_colab = False

    if in_colab:
        # Try to set up ngrok
        from google.colab import files
        import IPython

        # Install required packages if in Colab
        IPython.get_ipython().system('pip install flask flask-cors clickhouse-driver pyngrok pandas pyjwt')

        # Set up ngrok tunnel
        public_url = setup_ngrok()
        if public_url:
            print(f"Application running at: {public_url}")

        # Start the Flask app
        app.run(host='0.0.0.0', port=5000)
    else:
        # Normal execution
        app.run(host='0.0.0.0', port=5000, debug=True)

